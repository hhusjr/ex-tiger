%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%nonassoc IFSTMT IFELSESTMT WHILESTMT FORSTMT ARRAYDECLSTMT
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE
%left NEGATIVE

%%

program:	exp

decs        :       dec decs
            |
            ;

dec         :       tydec
            |       vardec
            |       fundec
            ;

tydec       :       TYPE ID EQ ty

ty          :       ID
            |       LBRACE tyfields RBRACE
            |       ARRAY OF ID
            ;

tyfields    :
            |       tyfieldlist
            ;
tyfieldlist :       ID COLON ID
            |       tyfieldlist COMMA ID COLON ID
            ;

vardec      :       VAR ID ASSIGN exp
            |       VAR ID COLON ID ASSIGN exp
            ;

fundec      :       FUNCTION ID LPAREN tyfields RPAREN EQ exp
            |       FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
            ;

exp         :       lvalue
            |       NIL
            |       LPAREN exp SEMICOLON seq RPAREN
            |       LPAREN RPAREN
            |       INT
            |       STRING
            |       MINUS exp %prec NEGATIVE
            |       ID LPAREN RPAREN
            |       ID LPAREN parlist RPAREN
            |       exp PLUS exp
            |       exp MINUS exp
            |       exp TIMES exp
            |       exp DIVIDE exp
            |       exp EQ exp
            |       exp NEQ exp
            |       exp GT exp
            |       exp LT exp
            |       exp GE exp
            |       exp LE exp
            |       exp AND exp
            |       exp OR exp
            |       ID LBRACE itemlist RBRACE
            |       ID LBRACE RBRACE
            |       ID LBRACK exp RBRACK OF exp %prec ARRAYDECLSTMT
            |       lvalue ASSIGN exp
            |       IF exp THEN exp ELSE exp %prec IFELSESTMT
            |       IF exp THEN exp %prec IFSTMT
            |       WHILE exp DO exp %prec WHILESTMT
            |       FOR ID ASSIGN exp TO exp DO exp %prec FORSTMT
            |       BREAK
            |       LET decs IN seq END
            |       LET decs IN END
            |       LPAREN exp RPAREN
            ;
lvalue      :       ID lsuf
            |       ID
            ;
lsuf        :       LBRACK exp RBRACK
            |       DOT ID
            |       lsuf LBRACK exp RBRACK
            |       lsuf DOT ID
            ;
seq         :       exp
            |       seq SEMICOLON exp
            ;
parlist     :       exp
            |       parlist COMMA exp
            ;
itemlist    :       ID EQ exp
            |       itemlist COMMA ID EQ exp
            ;
