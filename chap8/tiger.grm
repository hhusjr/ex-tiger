%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_expList expList;
	A_dec dec;
	A_decList decList;
	A_efield efield;
	A_efieldList efieldList;
	A_fundec fundec;
	A_fundecList fundecList;
	A_namety namety;
	A_nametyList nametyList;
	A_field field;
	A_fieldList fieldList;
	A_ty ty;
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%type <exp> exp program
%type <decList> decs
%type <dec> dec tydec vardec fundec
%type <ty> ty
%type <fieldList> tyfields tyfieldlist
%type <efieldList> itemlist
%type <expList> parlist seq
%type <var> lsuf lvalue

%start program

%nonassoc IFEXP IFELSEEXP WHILEEXP FOREXP ARRAYEXP
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE
%left NEGATIVE

%%

program     :       exp { absyn_root = $1; }
            ;

decs        :       dec decs { $$ = A_DecList($1, $2); }
            |       { $$ = NULL; }
            ;

dec         :       tydec { $$ = $1; }
            |       vardec { $$ = $1; }
            |       fundec { $$ = $1; }
            ;

tydec       :       TYPE ID EQ ty { $$ = A_TypeDec(EM_tokPos, A_NametyList(A_Namety(S_Symbol($2), $4), NULL)); }
            ;

ty          :       ID { $$ = A_NameTy(EM_tokPos, S_Symbol($1)); }
            |       LBRACE tyfields RBRACE { $$ = A_RecordTy(EM_tokPos, $2); }
            |       ARRAY OF ID { $$ = A_ArrayTy(EM_tokPos, S_Symbol($3)); }
            ;

tyfields    :       { $$ = NULL; }
            |       tyfieldlist { $$ = $1; }
            ;
tyfieldlist :       ID COLON ID { $$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), NULL); }
            |       ID COLON ID COMMA tyfieldlist { $$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), $5); }
            ;

vardec      :       VAR ID ASSIGN exp { $$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4); }
            |       VAR ID COLON ID ASSIGN exp { $$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6); }
            ;

fundec      :       FUNCTION ID LPAREN tyfields RPAREN EQ exp { $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7), NULL)); }
            |       FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp { $$ = A_FunctionDec(EM_tokPos, A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9), NULL)); }
            ;

exp         :       lvalue { $$ = A_VarExp(EM_tokPos, $1); }
            |       NIL { $$ = A_NilExp(EM_tokPos); }
            |       LPAREN exp SEMICOLON seq RPAREN { $$ = A_SeqExp(EM_tokPos, A_ExpList($2, $4)); }
            |       LPAREN RPAREN { $$ = A_SeqExp(EM_tokPos, NULL); }
            |       INT { $$ = A_IntExp(EM_tokPos, $1); }
            |       STRING { $$ = A_StringExp(EM_tokPos, $1); }
            |       MINUS exp %prec NEGATIVE { $$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2); }
            |       ID LPAREN RPAREN { $$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL); }
            |       ID LPAREN parlist RPAREN { $$ = A_CallExp(EM_tokPos, S_Symbol($1), $3); }
            |       exp PLUS exp { $$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3); }
            |       exp MINUS exp { $$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3); }
            |       exp TIMES exp { $$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3); }
            |       exp DIVIDE exp { $$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3); }
            |       exp EQ exp { $$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3); }
            |       exp NEQ exp { $$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3); }
            |       exp GT exp { $$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3); }
            |       exp LT exp { $$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3); }
            |       exp GE exp { $$ = A_OpExp(EM_tokPos, A_geOp, $1, $3); }
            |       exp LE exp { $$ = A_OpExp(EM_tokPos, A_leOp, $1, $3); }
            |       exp AND exp { $$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0)); }
            |       exp OR exp { $$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3); }
            |       ID LBRACE itemlist RBRACE { $$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3); }
            |       ID LBRACE RBRACE { $$ = A_RecordExp(EM_tokPos, S_Symbol($1), NULL); }
            |       ID LBRACK exp RBRACK OF exp %prec ARRAYEXP { $$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6); }
            |       lvalue ASSIGN exp { $$ = A_AssignExp(EM_tokPos, $1, $3); }
            |       IF exp THEN exp ELSE exp %prec IFELSEEXP { $$ = A_IfExp(EM_tokPos, $2, $4, $6); }
            |       IF exp THEN exp %prec IFEXP { $$ = A_IfExp(EM_tokPos, $2, $4, NULL); }
            |       WHILE exp DO exp %prec WHILEEXP { $$ = A_WhileExp(EM_tokPos, $2, $4); }
            |       FOR ID ASSIGN exp TO exp DO exp %prec FOREXP { $$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8); }
            |       BREAK { $$ = A_BreakExp(EM_tokPos); }
            |       LET decs IN seq END { $$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4)); }
            |       LET decs IN END { $$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, NULL)); }
            |       LPAREN exp RPAREN { $$ = $2; }
            ;
lvalue      :       lsuf { $$ = $1; }
            |       ID { $$ = A_SimpleVar(EM_tokPos, S_Symbol($1)); }
            ;
lsuf        :       ID LBRACK exp RBRACK { $$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3); }
            |       ID DOT ID { $$ = A_FieldVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), S_Symbol($3)); }
            |       lsuf LBRACK exp RBRACK { $$ = A_SubscriptVar(EM_tokPos, $1, $3); }
            |       lsuf DOT ID { $$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3)); }
            ;
seq         :       exp { $$ = A_ExpList($1, NULL); }
            |       exp SEMICOLON seq { $$ = A_ExpList($1, $3); }
            ;
parlist     :       exp { $$ = A_ExpList($1, NULL); }
            |       exp COMMA parlist { $$ = A_ExpList($1, $3); }
            ;
itemlist    :       ID EQ exp { $$ = A_EfieldList(A_Efield(S_Symbol($1), $3), NULL); }
            |       ID EQ exp COMMA itemlist { $$ = A_EfieldList(A_Efield(S_Symbol($1), $3), $5); }
            ;
